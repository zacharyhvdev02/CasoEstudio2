package com.mycompany.views;

import java.awt.Color;

import javax.swing.table.DefaultTableModel;

import com.mycompany.ilib.ClientSession;
import com.mycompany.ilib.UserFacade;

public class ClientBooks extends javax.swing.JPanel {
    public ClientBooks(boolean availableBooks) {
        initComponents();
        InitStyles();
        LoadBooks(availableBooks);

        if (availableBooks) {
            lendButton.setVisible(true);
            returnButton.setVisible(false);
            title.setText("Libros disponibles");
        } else {
            lendButton.setVisible(false);
            returnButton.setVisible(true);
            title.setText("Mis libros reservados");
        }
    }

    private void InitStyles() {
        title.putClientProperty("FlatLaf.styleClass", "h1");
        title.setForeground(Color.black);
        bookSearch.putClientProperty("JTextField.placeholderText", "Ingrese el título del libro a buscar.");
    }

    private void LoadBooks(boolean userBooks) {
        try {
            UserFacade userFacade = new UserFacade();
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);

            int userId = ClientSession.getInstance().getUserId();

            if (userBooks) {
                userFacade.getAvailableBooks(userId, "")
                        .forEach((u) -> model.addRow(new Object[] { u.getId(), u.getTitle(), u.getDate(),
                                u.getAuthor(), u.getCategory(), u.getEdit(), u.getLang(), u.getPages(),
                                u.getDescription(),
                                u.getEjemplares(), u.getStock(), u.getAvailable() }));
            } else {
                userFacade.getLentBooks(userId)
                        .forEach((u) -> model.addRow(new Object[] { u.getId(), u.getTitle(), u.getDate(),
                                u.getAuthor(), u.getCategory(), u.getEdit(), u.getLang(), u.getPages(),
                                u.getDescription(),
                                u.getEjemplares(), u.getStock(), u.getAvailable() }));
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        bookSearch = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        returnButton = new javax.swing.JButton();
        lendButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        bg.setBackground(new java.awt.Color(255, 255, 255));

        title.setText("Libros");

        searchButton.setBackground(new java.awt.Color(18, 90, 173));
        searchButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        searchButton.setForeground(new java.awt.Color(255, 255, 255));
        searchButton.setText("Buscar");
        searchButton.setBorderPainted(false);
        searchButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        returnButton.setBackground(new java.awt.Color(18, 90, 173));
        returnButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        returnButton.setForeground(new java.awt.Color(255, 255, 255));
        returnButton.setText("Devolver");
        returnButton.setBorderPainted(false);
        returnButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        lendButton.setBackground(new java.awt.Color(18, 90, 173));
        lendButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lendButton.setForeground(new java.awt.Color(255, 255, 255));
        lendButton.setText("Reservar");
        lendButton.setBorderPainted(false);
        lendButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lendButtonActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {

                },
                new String[] {
                        "ID", "Título", "Fecha de Pub.", "Autor", "Categoría", "Edición", "Idioma", "Páginas",
                        "Descripción", "Ejemplaresl", "Stock", "Disponibles"
                }) {
            Class[] types = new Class[] {
                    java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class,
                    java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class,
                    java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean[] {
                    false, true, true, true, true, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable1MousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout bgLayout = new javax.swing.GroupLayout(bg);
        bg.setLayout(bgLayout);
        bgLayout.setHorizontalGroup(
                bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(bgLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(bgLayout.createSequentialGroup()
                                                .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(699, 699, 699))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bgLayout
                                                .createSequentialGroup()
                                                .addGroup(bgLayout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jScrollPane1,
                                                                javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(bgLayout.createSequentialGroup()
                                                                .addGap(521, 521, 521)
                                                                .addComponent(lendButton)
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(returnButton))
                                                        .addGroup(bgLayout.createSequentialGroup()
                                                                .addComponent(bookSearch)
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(searchButton)))
                                                .addGap(50, 50, 50)))));
        bgLayout.setVerticalGroup(
                bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(bgLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, 15, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(bookSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 40,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(returnButton)
                                        .addComponent(lendButton))
                                .addGap(25, 25, 25)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap()));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                                Short.MAX_VALUE));
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MousePressed(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jTable1MousePressed

    }// GEN-LAST:event_jTable1MousePressed

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_returnButtonActionPerformed
        UserFacade userFacade = new UserFacade();
        if (jTable1.getSelectedRows().length < 1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Debes seleccionar un libros para devolver.\n", "AVISO",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
        } else {
            for (int i : jTable1.getSelectedRows()) {
                try {
                    userFacade.returnBook(ClientSession.getInstance().getUserId(), (int) jTable1.getValueAt(i, 0));
                    LoadBooks(false);
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
            }
        }
    }// GEN-LAST:event_returnButtonActionPerformed

    private void lendButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_lendButtonActionPerformed
        if (jTable1.getSelectedRow() > -1) {
            try {
                int bookId = (int) jTable1.getValueAt(jTable1.getSelectedRow(), 0);
                UserFacade userFacade = new UserFacade();
                userFacade.lendBook(ClientSession.getInstance().getUserId(), bookId);
                LoadBooks(true);
                javax.swing.JOptionPane.showMessageDialog(this, "Libro reservado correctamente.\n", "AVISO",
                        javax.swing.JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Debes seleccionar el libro a reservar.\n", "AVISO",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }// GEN-LAST:event_lendButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_searchButtonActionPerformed
        try {
            UserFacade userFacade = new UserFacade();
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            userFacade.getAvailableBooks(ClientSession.getInstance().getUserId(), bookSearch.getText()).stream()
                    .filter(book -> book.getTitle().contains(bookSearch.getText()))
                    .forEach((u) -> model.addRow(new Object[] { u.getId(), u.getTitle(), u.getDate(), u.getAuthor(),
                            u.getCategory(), u.getEdit(), u.getLang(), u.getPages(), u.getDescription(),
                            u.getEjemplares(), u.getStock(), u.getAvailable() }));
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }// GEN-LAST:event_searchButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bg;
    private javax.swing.JTextField bookSearch;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton lendButton;
    private javax.swing.JButton returnButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}